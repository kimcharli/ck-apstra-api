digraph "classes" {
rankdir=BT
charset="utf-8"
"ck_apstra_api.apstra_blueprint.CkApstraBlueprint" [color="black", fontcolor="black", label=<{CkApstraBlueprint|design<br ALIGN="LEFT"/>id : Optional[str]<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>log_prefix : str<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>managed_system_nodes<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>url_prefix : str<br ALIGN="LEFT"/>|add_generic_system(generic_system_spec: dict): Result[List, str]<br ALIGN="LEFT"/>add_multiple_vlan_ct(ct_label: str, untagged_vlan_id: int, tagged_vlan_ids: list[int]): str<br ALIGN="LEFT"/>add_single_vlan_ct(vni: int, vlan_id: int, is_tagged: bool): str<br ALIGN="LEFT"/>batch(batch_spec: dict, params): dict<br ALIGN="LEFT"/>delete_item(item: str, params)<br ALIGN="LEFT"/>dump(): dict<br ALIGN="LEFT"/>export_iplink(): Result[dict, str]<br ALIGN="LEFT"/>get_cabling_maps()<br ALIGN="LEFT"/>get_ct_ids(ct_labels: list): list<br ALIGN="LEFT"/>get_id(): str<br ALIGN="LEFT"/>get_interface_cts(interface_id): list<br ALIGN="LEFT"/>get_ip_pools()<br ALIGN="LEFT"/>get_item(item: str)<br ALIGN="LEFT"/>get_lldp_data()<br ALIGN="LEFT"/>get_managed_system_nodes()<br ALIGN="LEFT"/>get_server_interface_nodes(generic_system_label: str, intf_name: str): Result[str, str]<br ALIGN="LEFT"/>get_single_vlan_ct_id(vn_id: int)<br ALIGN="LEFT"/>get_single_vlan_ct_or_create(vlan_id: int, is_tagged: bool): str<br ALIGN="LEFT"/>get_switch_interface_nodes(switch_labels, intf_name): Result[List, str]<br ALIGN="LEFT"/>get_system_label(system_id)<br ALIGN="LEFT"/>get_system_node_from_label(system_label): Result[dict, str]<br ALIGN="LEFT"/>get_system_with_im(system_label): Result[dict, str]<br ALIGN="LEFT"/>get_temp_vn(virtual_network: str): Generator[Dict[str, Any], None, None]<br ALIGN="LEFT"/>get_transformation_id(system_label, intf_name, speed): Result[int, str]<br ALIGN="LEFT"/>get_virtual_network(vni)<br ALIGN="LEFT"/>import_iplink(ip_links_in: dict): Result[dict, str]<br ALIGN="LEFT"/>patch_cable_map(cable_map_spec): Result[None, str]<br ALIGN="LEFT"/>patch_item(item: str, patch_spec, params)<br ALIGN="LEFT"/>patch_leaf_server_link(link_spec: dict): None<br ALIGN="LEFT"/>patch_leaf_server_link_labels(spec, params, print_prefix)<br ALIGN="LEFT"/>patch_node_single(node, patch_spec, params)<br ALIGN="LEFT"/>patch_nodes(patch_spec, params)<br ALIGN="LEFT"/>patch_obj_policy_batch_apply(policy_spec, params)<br ALIGN="LEFT"/>patch_resource_groups(resource_group_spec: dict, params: dict)<br ALIGN="LEFT"/>patch_security_zones_csv_bulk(csv_bulk: str, params: dict)<br ALIGN="LEFT"/>patch_virtual_network(patch_spec, params, svi_requirement)<br ALIGN="LEFT"/>patch_virtual_networks_csv_bulk(csv_bulk: str, params: dict)<br ALIGN="LEFT"/>post_item(item_url: str, post_spec: dict, params)<br ALIGN="LEFT"/>post_tagging(nodes: list, tags_to_add, tags_to_remove, params)<br ALIGN="LEFT"/>put_item(item_url: str, put_spec: dict, params)<br ALIGN="LEFT"/>query(query_string: str): Result[List, str]<br ALIGN="LEFT"/>revert()<br ALIGN="LEFT"/>swap_ct_vns(from_vn_id, to_vn_id): Generator[any, None, None]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.apstra_session.CkApstraSession" [color="black", fontcolor="black", label=<{CkApstraSession|device_profile_cache : dict<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>last_error : NoneType, str<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>password : str<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>session : Session<br ALIGN="LEFT"/>ssl_verify : bool<br ALIGN="LEFT"/>token : NoneType<br ALIGN="LEFT"/>url_prefix : str<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|get_device_profile(device_profile_name: str): Result[dict, str]<br ALIGN="LEFT"/>get_items(url: str): dict<br ALIGN="LEFT"/>get_logical_device(id: int): dict<br ALIGN="LEFT"/>get_version(): str<br ALIGN="LEFT"/>is_online(): bool<br ALIGN="LEFT"/>list_blueprint_ids(): list<br ALIGN="LEFT"/>login(): None<br ALIGN="LEFT"/>logout(): None<br ALIGN="LEFT"/>patch_item(url: str, spec: dict): dict<br ALIGN="LEFT"/>patch_throttled(url: str, spec: dict, params: None): dict<br ALIGN="LEFT"/>post(url: str, data: dict, params: dict): dict<br ALIGN="LEFT"/>print_token(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.apstra_blueprint.CkEnum" [color="black", fontcolor="black", label=<{CkEnum|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.cli.CliVar" [color="black", fontcolor="black", label=<{CliVar|blueprint : Optional[CkApstraBlueprint]<br ALIGN="LEFT"/>bp_in_file : Optional[dict]<br ALIGN="LEFT"/>data_in_file : Optional[dict]<br ALIGN="LEFT"/>file_format : Optional[str]<br ALIGN="LEFT"/>file_path : Optional[str]<br ALIGN="LEFT"/>session : Optional[CkApstraSession]<br ALIGN="LEFT"/>|export_file(file_folder, file_format)<br ALIGN="LEFT"/>get_blueprint(bp_name, logger): CkApstraBlueprint<br ALIGN="LEFT"/>get_default_file_path(file_folder, file_format)<br ALIGN="LEFT"/>import_file(file_folder, file_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.ConnectivityTemplate" [color="black", fontcolor="black", label=<{ConnectivityTemplate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.CtCsvKeys" [color="black", fontcolor="black", label=<{CtCsvKeys|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.CtIpLink" [color="black", fontcolor="black", label=<{CtIpLink|policies : List[Dict]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.util.CustomFormatter" [color="black", fontcolor="black", label=<{CustomFormatter|FORMATS : dict<br ALIGN="LEFT"/>black : str<br ALIGN="LEFT"/>bold_red : str<br ALIGN="LEFT"/>bright_white : str<br ALIGN="LEFT"/>dark_gray : str<br ALIGN="LEFT"/>grey : str<br ALIGN="LEFT"/>red : str<br ALIGN="LEFT"/>reset : str<br ALIGN="LEFT"/>white : str<br ALIGN="LEFT"/>yellow : str<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.DataInit" [color="black", fontcolor="black", label=<{DataInit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.cli.dci.DciEsiMacMsb" [color="black", fontcolor="black", label=<{DciEsiMacMsb|<br ALIGN="LEFT"/>|pull_msb()<br ALIGN="LEFT"/>push_msb()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.ip_endpoint.EndpointWithVnId" [color="black", fontcolor="black", label=<{EndpointWithVnId|endpoint_id : str<br ALIGN="LEFT"/>vn_id : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.GenericSystem" [color="black", fontcolor="black", label=<{GenericSystem|bp : Optional[CkApstraBlueprint]<br ALIGN="LEFT"/>deploy_mode : Optional[str]<br ALIGN="LEFT"/>ext : Optional[bool]<br ALIGN="LEFT"/>fetched_deploy_flag<br ALIGN="LEFT"/>fetched_deploy_mode : Optional[bool]<br ALIGN="LEFT"/>fetched_external_flag : Optional[bool]<br ALIGN="LEFT"/>fetched_server_tags : Optional[List[str]]<br ALIGN="LEFT"/>gs_id : Optional[str]<br ALIGN="LEFT"/>link_groups : Optional[List[LinkGroup]]<br ALIGN="LEFT"/>log_prefix : str<br ALIGN="LEFT"/>server : str<br ALIGN="LEFT"/>system_type<br ALIGN="LEFT"/>tags_server : Optional[List[str]]<br ALIGN="LEFT"/>|add_vlans(): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>create()<br ALIGN="LEFT"/>fetch_apstra(apstra_bp: CkApstraBlueprint): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>fix_tags(): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>form_lacp()<br ALIGN="LEFT"/>load_link_group(data)<br ALIGN="LEFT"/>patch_vlans(vlan_spec: Dict): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>rename_interfaces()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.GsCsvKeys" [color="black", fontcolor="black", label=<{GsCsvKeys|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.IpLinkAttributes" [color="black", fontcolor="black", label=<{IpLinkAttributes|interface_type : str<br ALIGN="LEFT"/>ipv4_addressing_type : str<br ALIGN="LEFT"/>ipv6_addressing_type : str<br ALIGN="LEFT"/>l3_mtu : int<br ALIGN="LEFT"/>security_zone : str<br ALIGN="LEFT"/>vlan_id : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.apstra_blueprint.IpLinkEnum" [color="black", fontcolor="black", label=<{IpLinkEnum|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.LeafSwitch" [color="black", fontcolor="black", label=<{LeafSwitch|bp : Optional[CkApstraBlueprint]<br ALIGN="LEFT"/>id : Optional[str]<br ALIGN="LEFT"/>interfaces : Optional[Dict[str, Any]]<br ALIGN="LEFT"/>last_error : Optional[str]<br ALIGN="LEFT"/>log_prefix : Optional[str]<br ALIGN="LEFT"/>nodes : List[Dict[str, Any]]<br ALIGN="LEFT"/>switch_label : str<br ALIGN="LEFT"/>|interface_id(if_name: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.LinkGroup" [color="black", fontcolor="black", label=<{LinkGroup|ae : Optional[str]<br ALIGN="LEFT"/>bp : Optional[CkApstraBlueprint]<br ALIGN="LEFT"/>ct_names : Optional[List[str]]<br ALIGN="LEFT"/>fetched_ae_id : Optional[str]<br ALIGN="LEFT"/>fetched_ct_names : Optional[List[str]]<br ALIGN="LEFT"/>fetched_lag_mode : Optional[str]<br ALIGN="LEFT"/>fetched_tags : Optional[List[str]]<br ALIGN="LEFT"/>lag_mode : Optional[str]<br ALIGN="LEFT"/>link_spec<br ALIGN="LEFT"/>log_prefix : str<br ALIGN="LEFT"/>members : Optional[List[LinkMember]]<br ALIGN="LEFT"/>speed_count<br ALIGN="LEFT"/>tags_ae : Optional[List[str]]<br ALIGN="LEFT"/>|add_vlans(): Generator[Result[dict, str], Any, Any]<br ALIGN="LEFT"/>fetch_apstra(server_links: list, apstra_bp): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>fix_tags()<br ALIGN="LEFT"/>form_lacp()<br ALIGN="LEFT"/>load_link_member(data: Dict[str, Any])<br ALIGN="LEFT"/>remove_vlans(): Generator[Result[dict, str], Any, Any]<br ALIGN="LEFT"/>rename_interfaces(): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.LinkMember" [color="black", fontcolor="black", label=<{LinkMember|application_point<br ALIGN="LEFT"/>bp : Optional[CkApstraBlueprint]<br ALIGN="LEFT"/>comment : Optional[str]<br ALIGN="LEFT"/>fetched_ae_interface : Optional[Dict[str, Any]]<br ALIGN="LEFT"/>fetched_evpn_interface : Optional[Dict[str, Any]]<br ALIGN="LEFT"/>fetched_link_id : Optional[str]<br ALIGN="LEFT"/>fetched_server_ifname : Optional[str]<br ALIGN="LEFT"/>fetched_server_intf_id : Optional[str]<br ALIGN="LEFT"/>fetched_switch_id : Optional[str]<br ALIGN="LEFT"/>fetched_switch_intf_id : Optional[str]<br ALIGN="LEFT"/>fetched_tags_link : Optional[List[str]]<br ALIGN="LEFT"/>ifname : Optional[str]<br ALIGN="LEFT"/>line : int<br ALIGN="LEFT"/>link_spec<br ALIGN="LEFT"/>log_prefix : str<br ALIGN="LEFT"/>rename_spec<br ALIGN="LEFT"/>speed : Optional[str]<br ALIGN="LEFT"/>switch : str<br ALIGN="LEFT"/>switch_ifname : str<br ALIGN="LEFT"/>tags_link : Optional[List[str]]<br ALIGN="LEFT"/>|fetch_apstra(server_links: list, apstra_bp): Generator[Result[str, str], Any, Any]<br ALIGN="LEFT"/>fix_tags()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.ip_endpoint.NamedPrefixList" [color="black", fontcolor="black", label=<{NamedPrefixList|members : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|add(ipv4_addr: str, vn_id: bool)<br ALIGN="LEFT"/>iteritems()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.cli.virtual_network.relocate_vn.Order" [color="black", fontcolor="black", label=<{Order|target_rz : str<br ALIGN="LEFT"/>target_vn : str<br ALIGN="LEFT"/>target_vn_id : Optional[str]<br ALIGN="LEFT"/>target_vn_spec : Optional[dict]<br ALIGN="LEFT"/>terget_rz_id : Optional[str]<br ALIGN="LEFT"/>test_vn : Optional[str]<br ALIGN="LEFT"/>test_vn_id : Optional[str]<br ALIGN="LEFT"/>test_vn_spec : Optional[dict]<br ALIGN="LEFT"/>|summary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.PipelineAttributes" [color="black", fontcolor="black", label=<{PipelineAttributes|first_subpolicy : str<br ALIGN="LEFT"/>second_subpolicy : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.PolicyBatch" [color="black", fontcolor="black", label=<{PolicyBatch|attributes<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>policy_type_name : str<br ALIGN="LEFT"/>tags : List[str]<br ALIGN="LEFT"/>user_data : Optional[dict]<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.PolicyIpLink" [color="black", fontcolor="black", label=<{PolicyIpLink|attributes<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>policy_type_name : str<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.PolicyPipeline" [color="black", fontcolor="black", label=<{PolicyPipeline|attributes<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>policy_type_name : str<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.ip_endpoint.PrefixListCollection" [color="black", fontcolor="black", label=<{PrefixListCollection|logger : NoneType, RootLogger<br ALIGN="LEFT"/>named_prefix_lists : dict<br ALIGN="LEFT"/>vn_nodes<br ALIGN="LEFT"/>|add(prefix_list_name: str, ipv4_addr: str)<br ALIGN="LEFT"/>iteritems()<br ALIGN="LEFT"/>read_from_set(set_file: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.ip_endpoint.PrefixListMember" [color="black", fontcolor="black", label=<{PrefixListMember|prefix : str<br ALIGN="LEFT"/>vn_id : str<br ALIGN="LEFT"/>|get_address()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.ServerBlueprint" [color="black", fontcolor="black", label=<{ServerBlueprint|blueprint : str<br ALIGN="LEFT"/>ck_bp : Optional[CkApstraBlueprint]<br ALIGN="LEFT"/>servers : Dict[str, GenericSystem]<br ALIGN="LEFT"/>|add_generic_systems()<br ALIGN="LEFT"/>add_vlans()<br ALIGN="LEFT"/>fetch_apstra(apstra_session: CkApstraSession): Result[str, str]<br ALIGN="LEFT"/>fix_tags()<br ALIGN="LEFT"/>form_lacp()<br ALIGN="LEFT"/>interate_generic_systems()<br ALIGN="LEFT"/>iterate_server_blueprints()<br ALIGN="LEFT"/>rename_interfaces()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ck_apstra_api.connectivity_template.SubPolicies" [color="black", fontcolor="black", label=<{SubPolicies|subpolicies : List[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.cli.system.SystemsData" [color="black", fontcolor="black", label=<{SystemsData|asn : str<br ALIGN="LEFT"/>device_profile : str<br ALIGN="LEFT"/>lo0 : str<br ALIGN="LEFT"/>rack : str<br ALIGN="LEFT"/>system : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ck_apstra_api.generic_system.GenericSystem" -> "ck_apstra_api.generic_system.DataInit" [arrowhead="empty", arrowtail="none"];
"ck_apstra_api.generic_system.LinkGroup" -> "ck_apstra_api.generic_system.DataInit" [arrowhead="empty", arrowtail="none"];
"ck_apstra_api.generic_system.LinkMember" -> "ck_apstra_api.generic_system.DataInit" [arrowhead="empty", arrowtail="none"];
"ck_apstra_api.generic_system.ServerBlueprint" -> "ck_apstra_api.generic_system.DataInit" [arrowhead="empty", arrowtail="none"];
"ck_apstra_api.apstra_session.CkApstraSession" -> "ck_apstra_api.cli.CliVar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"ck_apstra_api.connectivity_template.IpLinkAttributes" -> "ck_apstra_api.connectivity_template.PolicyIpLink" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attributes", style="solid"];
"ck_apstra_api.connectivity_template.PipelineAttributes" -> "ck_apstra_api.connectivity_template.PolicyPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attributes", style="solid"];
"ck_apstra_api.connectivity_template.SubPolicies" -> "ck_apstra_api.connectivity_template.PolicyBatch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attributes", style="solid"];
"ck_apstra_api.apstra_session.CkApstraSession" -> "ck_apstra_api.apstra_blueprint.CkApstraBlueprint" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
}
